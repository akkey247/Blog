<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on dev.Engine</title>
    <link>https://dev-n-gine.akkey.net/article/index.xml</link>
    <description>Recent content in Articles on dev.Engine</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 30 Jan 2018 08:37:40 +0900</lastBuildDate>
    <atom:link href="https://dev-n-gine.akkey.net/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.js(npm)をWindowsにインストールする</title>
      <link>https://dev-n-gine.akkey.net/article/20180130_nodejs-install/</link>
      <pubDate>Tue, 30 Jan 2018 08:37:40 +0900</pubDate>
      
      <guid>https://dev-n-gine.akkey.net/article/20180130_nodejs-install/</guid>
      <description>

&lt;p&gt;最近は何をするにしても npm を使ってる気がします。&lt;br /&gt;
npm は Node.js のパッケージ管理ツールなんですが、 Node.js 使わないときでもタスクランナー(タスク自動化ツール)として重宝します。&lt;br /&gt;
ただ、インストールするたびにやり方を忘れてしまうので、メモを残しておくことにします。&lt;br /&gt;
環境はWindowsです。&lt;/p&gt;

&lt;h2 id=&#34;nodistをインストール&#34;&gt;nodistをインストール&lt;/h2&gt;

&lt;p&gt;まずは Node.js をインストールするわけですが、インストール後もバージョンの更新は簡単に行いたいので、バージョン管理ツールは入れておきたいところです。&lt;br /&gt;
なので、先に nodist をインストールしておきます。&lt;br /&gt;
nodist はインストーラでのインストールになるようなので、インストーラをダウンロードしてきます。&lt;/p&gt;

&lt;p&gt;[インストーラ]&lt;br /&gt;
&lt;a href=&#34;https://github.com/marcelklehr/nodist/releases&#34;&gt;https://github.com/marcelklehr/nodist/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストールが終わったら、ちゃんと入っているか確認しておきます。&lt;br /&gt;
コマンドプロンプトなどで以下のコマンドを入力して、バージョンが見れたらOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nodist -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodist の詳しい使い方については &lt;a href=&#34;https://qiita.com/akkey2475/items/e0ea878a6b955efd9fba&#34;&gt;こちら&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;node-jsをインストール&#34;&gt;Node.jsをインストール&lt;/h2&gt;

&lt;p&gt;本題の Node.js をインストールします。&lt;br /&gt;
nodist コマンドを使えば一発でインストール可能です。&lt;/p&gt;

&lt;p&gt;今回は最新安定版をイントールしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nodist stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが終わったら、以下のコマンドで確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;node -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンが表示されればOK。&lt;/p&gt;

&lt;h2 id=&#34;npm-の確認&#34;&gt;npm の確認&lt;/h2&gt;

&lt;p&gt;Node.js が入れば npm は自動でインストールされています。&lt;br /&gt;
以下のコマンドで確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンが表示されればOKです。&lt;/p&gt;

&lt;p&gt;npm の詳しい使い方については &lt;a href=&#34;https://qiita.com/akkey2475/items/4c1eb3e3f36f705c7a1c&#34;&gt;こちら&lt;/a&gt; 。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoで作ったブログをGitHub Pagesで公開する</title>
      <link>https://dev-n-gine.akkey.net/article/20180118_hugo-github-page/</link>
      <pubDate>Thu, 18 Jan 2018 12:19:52 +0900</pubDate>
      
      <guid>https://dev-n-gine.akkey.net/article/20180118_hugo-github-page/</guid>
      <description>

&lt;p&gt;以前書いた &lt;a href=&#34;https://dev-n-gine.akkey.net/post/article1/&#34;&gt;Hugo でブログを作る&lt;/a&gt; という記事で作ったブログサイトを GitHub Pages で公開するまでの方法を書いてみます。&lt;/p&gt;

&lt;h2 id=&#34;githubで新規リポジトリを作成する&#34;&gt;GitHubで新規リポジトリを作成する&lt;/h2&gt;

&lt;p&gt;まずは、GitHubでリポジトリを作成します。&lt;br /&gt;
仮に &lt;code&gt;Blog&lt;/code&gt; という名前のリポジトリで作成してみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dev-n-gine.akkey.net/20180118/hugo-github-page/img/1.png&#34; alt=&#34;リポジトリ作成&#34; /&gt;&lt;/p&gt;

&lt;p&gt;作り終わったら、ローカル環境へクローンしてきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:ユーザー名/Blog.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;クローンした空のソースの中に Hugo で作成したサイトをコピーしてきます。&lt;br /&gt;
後述しますが、一旦 &lt;code&gt;public&lt;/code&gt; ディレクトリは一旦消しています。&lt;/p&gt;

&lt;p&gt;こんな構成になります。&lt;br /&gt;
(サブディレクトリの中身は若干端折ってます。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Blog/
├ archetypes/
├ content/
├ data/
├ layouts/
├ static/
├ themes/
├ └ hugo_theme_beg/  // 前の記事で使ったテーマ
└ config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦、コミットしておきます。&lt;/p&gt;

&lt;h2 id=&#34;公開用ディレクトリを作成する&#34;&gt;公開用ディレクトリを作成する&lt;/h2&gt;

&lt;p&gt;Hugoでビルドした際に自動で生成されるディレクトリは &lt;code&gt;public&lt;/code&gt; でしたが、&lt;br /&gt;
GitHub Pagesでは公開ディレクトリは &lt;code&gt;docs&lt;/code&gt; という名前にしなくてはいけません。&lt;br /&gt;
なので、ビルドする際にディレクトリ名を指定することにします。&lt;/p&gt;

&lt;p&gt;ディレクトリ名を指定してビルドするには、コマンドに &lt;code&gt;-d ディレクトリ名&lt;/code&gt; と追加します。&lt;br /&gt;
早速ディレクトリ名に &lt;code&gt;docs&lt;/code&gt; を指定してビルドしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t hugo_theme_beg -d docs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;docs&lt;/code&gt; という名前でディレクトリが作成されたと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Blog/
├ archetypes/
├ content/
├ data/
├ docs/     // ★作成された
├ layouts/
├ static/
├ themes/
└ config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;github-pagesへ反映する&#34;&gt;GitHub Pagesへ反映する&lt;/h2&gt;

&lt;p&gt;まずは、作ったソースをリモートリポジトリへプッシュします。&lt;/p&gt;

&lt;p&gt;プッシュが終わったら、GitHubから設定を変更します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dev-n-gine.akkey.net/20180118/hugo-github-page/img/2.png&#34; alt=&#34;設定変更&#34; /&gt;&lt;/p&gt;

&lt;p&gt;GitHub の setting ページにある GitHub Pages 項目へ移動します。&lt;br /&gt;
None と書いてあるプルダウンメニューがあるので、そこを開いて「master branch/docs folder」を選びます。&lt;br /&gt;
選択したら「Save」ボタンを押してください。&lt;br /&gt;
これで準備OKです。&lt;/p&gt;

&lt;h2 id=&#34;ブログを確認する&#34;&gt;ブログを確認する&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;https://ユーザー名.github.io/Blog/&lt;/code&gt; のURLにアクセスすればページが表示されるはずです。&lt;/p&gt;

&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;本当はHugoで作ったプロジェクトをローカルリポジトリとして初期化してからリモートに上げる流れがスムーズなのかもしれないですね。&lt;br /&gt;
こっちの方が楽そうだったので、このやり方で反映してみました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Compassを使える環境を整える</title>
      <link>https://dev-n-gine.akkey.net/article/20180117_hugo-compass/</link>
      <pubDate>Wed, 17 Jan 2018 13:01:33 +0900</pubDate>
      
      <guid>https://dev-n-gine.akkey.net/article/20180117_hugo-compass/</guid>
      <description>

&lt;p&gt;ブログを作成するにあたってCSSを触っているのですが、CSSのまま編集するとかなり手間なので、この機会にSass(SCSS)とCompassを利用してみることにしました。&lt;br /&gt;
今回も環境はWindowsです。&lt;/p&gt;

&lt;h2 id=&#34;rubyをインストールする&#34;&gt;Rubyをインストールする&lt;/h2&gt;

&lt;p&gt;まずは準備から。&lt;br /&gt;
以下のページから RubyInstaller をダウンロードし、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://rubyinstaller.org/&#34;&gt;https://rubyinstaller.org/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[インストール時のメモ]&lt;br /&gt;
・Td/Tk サポートのインストールはチェックしなくてもOK&lt;br /&gt;
・Rubyの実行ファイルへパスを通す設定にチェックしておく&lt;br /&gt;
・.rb,.rbwのファイル関連付け設定のチェックは任意&lt;/p&gt;

&lt;h2 id=&#34;compassをインストールする&#34;&gt;Compassをインストールする&lt;/h2&gt;

&lt;p&gt;Rubyのインストールが終わったら、早速Compassをインストールします。&lt;br /&gt;
コマンドプロンプトで以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gem update --system
gem install compass
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールが終わったら、ちゃんと入っているか確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compass -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでバージョンが表示されればOK、Compassを使う環境作成は完了です。&lt;br /&gt;
と、本来の目的は果たしたわけですが、ここから使い方についても調べてみます。&lt;/p&gt;

&lt;h2 id=&#34;compassの新規プロジェクト作成&#34;&gt;Compassの新規プロジェクト作成&lt;/h2&gt;

&lt;p&gt;Compassを利用する前にはまず新規プロジェクトを作る必要があるようですね。&lt;br /&gt;
Compassを利用したいディレクトリで以下のコマンドを実行することで、新規プロジェクトが作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compass create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最小限の構成で初期化したい場合は &lt;code&gt;--bare&lt;/code&gt; オプションを付けると良いようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compass create --bare
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行後、以下のディレクトリが作成されていれば成功です。(ちなみに &lt;code&gt;--bare&lt;/code&gt; オプション有りの場合です。)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root
├ sass/      // Sass(SCSS)ファイルが入るディレクトリ
└ config.rb  // Compass設定ファイル
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scssをビルドする&#34;&gt;scssをビルドする&lt;/h2&gt;

&lt;p&gt;では早速、試しにSCSSのサンプルコードをビルドしてみます。&lt;br /&gt;
まずは、対象のSCSSファイルを作成して、 &lt;code&gt;sass&lt;/code&gt; ディレクトリ配下に設置します。&lt;/p&gt;

&lt;p&gt;sample.scss&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@import &#39;compass&#39;;
.sample {
  @include border-radius(3px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;root
├ sass/
├ └ sample.sass  // ★追加したファイル
└ config.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ビルドをしてみます。&lt;br /&gt;
以下のコマンドを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;compass watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると、 &lt;code&gt;stylesheet/&lt;/code&gt; , &lt;code&gt;.sass-cache/&lt;/code&gt; ディレクトリが作成されます。&lt;br /&gt;
&lt;code&gt;stylesheet/&lt;/code&gt; ディレクトリ配下にサンプルコードのビルド結果ファイルが格納されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root
├ .sass-cache/
├ sass/
│  └ sample.scss
├ stylesheet/    // ★ビルド後のCSSが入るディレクトリ
│  └ sample.css  // ★CSSファイル
└ config.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sample.css&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/* line 2, ../sass/sample.scss */
.sample {
  -moz-border-radius: 3px;
  -webkit-border-radius: 3px;
  border-radius: 3px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでビルド完了です。&lt;/p&gt;

&lt;h2 id=&#34;エラーでビルド出来ない時&#34;&gt;エラーでビルド出来ない時&lt;/h2&gt;

&lt;p&gt;最初ビルドがうまく動かない時がありました。&lt;br /&gt;
エラーメッセージにはこんな表示が。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error: Invalid Windows-31J character
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;調べてみると &lt;code&gt;config.rb&lt;/code&gt; に以下の１行を追加することでビルド出来るようになるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Encoding.default_external = &#39;utf-8&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;[参考]&lt;br /&gt;
&lt;a href=&#34;http://blog.a4works.co.jp/archives/326&#34;&gt;Windows環境のcompassで”Invalid Windows-31J character”のエラー&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ビルド後のcssのコメントが邪魔な時&#34;&gt;ビルド後のcssのコメントが邪魔な時&lt;/h2&gt;

&lt;p&gt;個人的にビルドされたCSSに入る↓このコメントが邪魔だったので、消す方法を探してみました。&lt;br /&gt;
どうやら、元々 &lt;code&gt;config.rb&lt;/code&gt; に書いてある &lt;code&gt;# line_comments = false&lt;/code&gt; をコメント解除すれば良いみたいですね。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;require &#39;compass/import-once/activate&#39;

http_path = &amp;quot;/&amp;quot;
css_dir = &amp;quot;stylesheets&amp;quot;
sass_dir = &amp;quot;sass&amp;quot;
images_dir = &amp;quot;images&amp;quot;
javascripts_dir = &amp;quot;javascripts&amp;quot;

# ビルド後のコメント非表示
line_comments = false
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Hugoでブログを作る</title>
      <link>https://dev-n-gine.akkey.net/article/20171228_hugo-new-blog/</link>
      <pubDate>Thu, 28 Dec 2017 16:40:22 +0900</pubDate>
      
      <guid>https://dev-n-gine.akkey.net/article/20171228_hugo-new-blog/</guid>
      <description>

&lt;p&gt;はじめまして、Akkey(アッキー)と申します。&lt;br /&gt;
今回、ブログを作成するにあたってHugoという静的サイト生成ツールを利用したので、ブログ作成までの手順をまとめてみました。&lt;br /&gt;
ちなみに環境はWindowsです。&lt;/p&gt;

&lt;h2 id=&#34;hugo-をダウンロードする&#34;&gt;Hugo をダウンロードする&lt;/h2&gt;

&lt;p&gt;以下のページからHugoをダウンロードします。&lt;br /&gt;
自分の環境にあったものをダウンロードしてきてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gohugoio/hugo/releases&#34;&gt;https://github.com/gohugoio/hugo/releases&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そして、ダウンロードした圧縮ファイルを展開すると中に &lt;code&gt;Hugo.exe&lt;/code&gt; という実行ファイルがあるので、任意のディレクトリに保存します。&lt;br /&gt;
例えば↓のような感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\Hugo\Hugo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存したHugo.exeにはパスを通しておきます。&lt;/p&gt;

&lt;h2 id=&#34;新規プロジェクトを作成する&#34;&gt;新規プロジェクトを作成する&lt;/h2&gt;

&lt;p&gt;まずは、以下のコマンドを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new site new_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;new_site&lt;/code&gt; の部分には任意の名前を入力してください。&lt;br /&gt;
コマンドを実行すると、新規プロジェクトが作成されます。&lt;br /&gt;
ファイル構成は以下の様な感じになると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new_site/
├ archetypes/
├ └ default.md  // 記事の雛形
├ content/    // 記事など
├ data/       // 不明
├ layouts/    // レイアウト(?)
├ static/     // 静的ファイル
├ themes/     // テーマ
└ config.toml // 設定ファイル
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、作成されたプロジェクトのディレクトリに移動しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd new_site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一応この状態でも動くので、確認してみます。&lt;br /&gt;
以下のコマンドを実行すると、サーバーが立ち上がりプレビューを確認することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンド実行後、 &lt;code&gt;localhost:1313&lt;/code&gt; にアクセスすると真っ白なサイトが表示されます。&lt;br /&gt;
まだ、何も触っていないので真っ白です。&lt;/p&gt;

&lt;h2 id=&#34;テーマをダウンロードして適用する&#34;&gt;テーマをダウンロードして適用する&lt;/h2&gt;

&lt;p&gt;テーマを適用してみます。&lt;br /&gt;
以下のサイトから好きなテーマをダウンロードしてきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://themes.gohugo.io/&#34;&gt;https://themes.gohugo.io/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードしたテーマは &lt;code&gt;themes&lt;/code&gt; ディレクトリの中に入れておいてください。&lt;br /&gt;
今回は &lt;code&gt;hugo_theme_beg&lt;/code&gt; というテーマを使わせていただきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dim0627/hugo_theme_beg&#34;&gt;https://github.com/dim0627/hugo_theme_beg&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new_site/
├ archetypes/
├ └ default.md
├ content/
├ data/
├ layouts/
├ static/
├ themes/
├ └ hugo_theme_beg/  // ★ダウンロードしたテーマ
└ config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;テーマを適用してプレビューするには、以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t hugo_theme_beg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まだ、この状態では記事を投稿していないので、記事は表示されません。&lt;/p&gt;

&lt;h2 id=&#34;記事を投稿する&#34;&gt;記事を投稿する&lt;/h2&gt;

&lt;p&gt;以下のようなコマンドを実行することで記事が投稿できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/newpage.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;newpage.md&lt;/code&gt; の部分は任意の名前を入力してください。&lt;br /&gt;
実行すると &lt;code&gt;content/post&lt;/code&gt; ディレクトリの配下に &lt;code&gt;newpage.md&lt;/code&gt; が作成されます。&lt;br /&gt;
↓のような状態になっていると思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new_site/
├ archetypes/
├ └ default.md
├ content/
├ └ post/
├   └ newpage.md  // ★作成した記事
├ data/
├ layouts/
├ static/
├ themes/
├ └ hugo_theme_beg/
└ config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、このままではプレビューしても記事が表示されないので、プレビューの前に少しページの設定を変更します。&lt;br /&gt;
まず、 &lt;code&gt;newpage.md&lt;/code&gt; を開き &lt;code&gt;draft: true&lt;/code&gt; を &lt;code&gt;draft: false&lt;/code&gt; に変更します。これによって下書き状態が解除されます。&lt;br /&gt;
(補足すると &lt;code&gt;---&lt;/code&gt; で括られた部分は記事の設定を書く場所です。)&lt;br /&gt;
また、記事の中身が無いので、適当な内容も書いておきます。&lt;br /&gt;
とりあえず、おなじみの「Hello World!!」と書いておきました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: &amp;quot;Newpage&amp;quot;
date: 2018-01-01T00:00:00+09:00
draft: false
---

Hello World!!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修正を保存して、プレビューしてみると記事が作成されていることが分かります。&lt;/p&gt;

&lt;h2 id=&#34;記事の更新をリアルタイムに反映する&#34;&gt;記事の更新をリアルタイムに反映する&lt;/h2&gt;

&lt;p&gt;プレビューしている状態で記事の更新がリアルタイムに反映したい時は &lt;code&gt;-watch&lt;/code&gt; オプションを付けます。&lt;br /&gt;
このオプションを付けることによって、記事の更新がリアルタイムに反映されるようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server -t hugo_theme_beg -watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と言いたかったのですが、付けなくても反映されるらしいですね。&lt;br /&gt;
ちなみに短縮形で &lt;code&gt;-w&lt;/code&gt; と書いても良いようです。&lt;/p&gt;

&lt;h2 id=&#34;サイトをビルドする&#34;&gt;サイトをビルドする&lt;/h2&gt;

&lt;p&gt;実際にサイトをサーバーで稼働させるためにはビルドを行うことになります。&lt;br /&gt;
ビルドするには、以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo -t hugo_theme_beg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると、 &lt;code&gt;public&lt;/code&gt; というディレクトリが作成されて、その中にビルドされたサイトが作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;new_site/
├ archetypes/
├ └ default.md
├ content/
├ └ post/
├   └ newpage.md
├ data/
├ public/       // ★ビルドされたサイト
├ ├ categories  // カテゴリページ
├ ├ css         // CSSファイル
├ ├ page        // 記事一覧ページ
├ ├ post        // 記事
├ ├ tags        // タグページ
├ ├ 404.html    // 404エラーページ
├ ├ index.html  // トップページ
├ ├ index.xml   // 不明
├ └ sitemap.xml // サイトマップ
├ layouts/
├ static/
├ themes/
├ └ hugo_theme_beg/
└ config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この &lt;code&gt;public&lt;/code&gt; ディレクトリの配下が実際のサイトになります。&lt;br /&gt;
&lt;code&gt;public&lt;/code&gt; ディレクトリの中身をサーバーに置いて、アクセスするとプレビュー時と同じように表示されるはずです。&lt;/p&gt;

&lt;h2 id=&#34;終わりに&#34;&gt;終わりに&lt;/h2&gt;

&lt;p&gt;実際には、Github Pages を利用してサイト公開までやっているのですが、内容がごちゃごちゃするかなと思い、ここまでの内容に留めました。&lt;br /&gt;
Github に上げて公開する手順もまた記事にしたいですね。&lt;br /&gt;
コマンドのオプションや設定ファイルの書き方についても、また書いていこうと思います。&lt;br /&gt;
それでは！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>